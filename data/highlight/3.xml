<?xml version="1.0" encoding="UTF-8"?>
<publication maker="liu bin">
    <journal>International Journal of Information Management</journal>
    <time>Volume 36, Issue 6, Part A, December 2016, Pages 900-906</time>
International Journal of Information Management
    <title>Directory-based incentive management services for ad-hoc mobile clouds</title>
    <author>Abdullah Yousafzai.</author> Author links open the author workspace.Opens the author workspaceOpens the author workspacea. Numbers and letters correspond to the affiliation list. Click to expose these in author workspaceb. Numbers and letters correspond to the affiliation list. Click to expose these in author workspace<author>Victor Chang.</author> Author links open the author workspace.c. Numbers and letters correspond to the affiliation list. Click to expose these in author workspace<author>Abdullah Gani.</author> Author links open the author workspace.Opens the author workspaceOpens the author workspacea. Numbers and letters correspond to the affiliation list. Click to expose these in author workspaceb. Numbers and letters correspond to the affiliation list. Click to expose these in author workspace<author>Rafidah Md. Noor.</author> Author links open the author workspace.a. Numbers and letters correspond to the affiliation list. Click to expose these in author workspace
a
Faculty of Computer Science and Information Technology, University of Malaya (UM), 50603 Kuala Lumpur, Malaysia
b
Center for Mobile Cloud Computing Research, University of Malaya (UM), 50603 Kuala Lumpur, Malaysia
c
International Business School Suzhou, Xi'an Jiaotong Liverpool University, Suzhou, China
Show more
    <doi>https://doi.org/10.1016/j.ijinfomgt.2016.05.019</doi>Get rights and content
Highlights
    <highlight id="1">We present a directory-based framework for incentives management of mobile device resources in ad-hoc mobile cloud environment.</highlight>
    <highlight id="2">We measure the incentives in energy consumption and energy saved not in Monterey bills.</highlight>
    <highlight id="3">We equalized the incentives using third party settlement of energy consumptions according to the directory valuations.</highlight>
    <highlight id="4">We present future application and business prospects utilizing the proposed framework.</highlight>

    <abstract><![CDATA[
Abstract
Mobile cloud computing is envisioned as a promising approach to augment the computational capabilities of mobile devices for emerging resource-intensive mobile applications. This augmentation is generally achieved through the capabilities of stationary resources in cloud data centers. However, these resources are mostly not free and sometimes not available. Mobile devices are becoming powerful day by day and can form a self-organizing mobile ad-hoc network of nearby devices and offer their resources as on-demand services to available nodes in the network. In the ad-hoc mobile cloud, devices can move after consuming or providing services to one another. During this process, the problem of incentives arises for a node to provide service to another device (or other devices) in the network, which ultimately decreases the motivation of the mobile device to form an ad-hoc mobile cloud. ]]><h target="1" match="part">To solve this problem, we propose a directory-based architecture that keeps track of the retribution and reward valuations (in terms of energy saved and consumed) for devices even after they move from one ad-hoc environment to another.</h><![CDATA[ From simulation results, we infer that this framework increases the motivation for mobile devices to form a self-organizing proximate mobile cloud network and to share their resources in the network.]]></abstract>

Graphical abstract
Unlabelled figure
Download high-res image (116KB)Download full-size image

    <keywords>Ad-hoc mobile cloud</keywords> 
    <keywords>Mobile cloud computing</keywords>
    <keywords>Incentives</keywords>
    <keywords>Directory service</keywords>
    <keywords>Applications and business prospects</keywords>
    
    <section name="Introduction" category="introduction"><![CDATA[
1. Introduction
Smart mobile devices are gaining enormous popularity, and new smart mobile applications, such as natural language processing, face recognition, interactive gaming, and augmented reality, are rising and attracting great attention (Cohen, 2008; Soyata, Muraleedharan, Funai, Kwon, & Heinzelman, 2012). These smart mobile applications are typically resource-intensive and demand thorough computation and high energy. Owing to the physical size constraint, mobile devices generally have limited computational resources and scarce battery life. Thus, the tension between resource-intensive applications and resource-constrained mobile devices poses a significant challenge for the future mobile platform development (Cuervo et al., 2010).
Mobile cloud computing (MCC) is envisioned as a promising approach to address such a challenge by offloading the extensive computation via wireless access (cell network, Wi-Fi, or Bluetooth) to the resource-rich cloud infrastructure to extend the device battery lifetime and to improve user response time. In MCC, the ecosystem of computational offloading contains different resources and may use any of them depending on availability and scheduling decisions. These resources are presented in a generic MCC diagram shown in Fig. 1. The most common resources available and used are public cloud service providers (CSPs such as Amazon EC2 and Google Compute Cloud), which provide on-demand services (software, platform, and infrastructure) to the mobile applications using a pay-as-you-go model. The second type of resource is the cloudlet (Satyanarayanan, Bahl, Caceres, & Davies, 2009), a nearby (local) Internet-enabled rich-computing infrastructure that is connected to mobile devices through wireless access. The third type of resource is the local proximate mobile cloud, which is based on the formation of an ad-hoc network of devices within the vicinity to collectively serve one another by either Wi-Fi or Bluetooth network interfaces.
Fig. 1
Download high-res image (349KB)Download full-size image
Fig. 1. Generic view of mobile cloud environment.
Emerging cloud services (Sharma, Chang, Tim, Wong, & Gadia, 2016) provided by public clouds are not free, and the cloudlet is not always available. To augment the capabilities of smartphones, they still can form a proximate mobile cloud environment of nearby mobile devices. The problem with the devices in a proximate mobile cloud environment is their mobility, which raises questions about how to provide incentives to devices that are sharing their resources. This incentive problem also decreases the motivation for devices to join a self-organizing proximate mobile cloud environment and to provide and consume services to and from other devices. ]]><h target="1" match="part">To solve the retribution and reward problem for devices in a proximate mobile cloud environment, we propose a directory-based framework that mitigates the issue of incentives to the nodes in an ad-hoc environment, even after their movement from one environment to another. </h><![CDATA[The assurance of the incentives to devices motivates the devices to join a self-organizing proximate mobile cloud environment.
In this article, we interchangeably use the terms proximate mobile cloud and mobile ad-hoc cloud because they represent the same concept. To the best of our knowledge, this is the first attempt to solve the incentive problem in an ad-hoc cloud environment using a third-party settlement. The remainder of this article is divided into six sections. Section 2 presents the motivation for this research based on a brief summary of related works on the incentive mechanisms for an ad-hoc mobile cloud environment. Section 3 describes the problem. Section 4 provides the details of the functional components of the frameworks along with their interaction and flow of communication. Section 5 presents the results obtained b simulating the scenario presented in this paper and provides a discussion of the data collected using experiments. Section 6 indicates the application and business prospects that can be envisioned through the adaptability and tailoring of the proposed framework. Finally, Section 7 concludes this paper as well as presents the limitations and possible future research directions using the proposed framework.

]]></section>
    
    <section name="Related work" category="background"> <![CDATA[
2. Related work
2.1. MCC
Research on MCC is centered on augmenting the computational and storage capabilities of mobile devices using the services offered by remote computing infrastructure (Karthik, 2010). A dynamic computational offloading algorithm for a mobile cloud environment was proposed by Huang, Wang, and Niyato (2012) to assist mobile device users in determining which part of a mobile application to be executed remotely. Barbera, Kosta, Mei, and Stefa (2013) evaluated the energy cost and bandwidth of computational offloading in MCC. Zhang, Wen, and Wu (2013) explored the minimum-energy task-scheduling problem by employing a Markovian chain model. Chen (2015) designed a decentralized computational offloading game for decision making, in which multiple mobile users were multiplexed over a common infrastructure. These preceding works have assumed the case of augmentation of mobile devices through public cloud providers, which may not be true for some mobile users and mobile environments. Zhou, Dastjerdi, Calheiros, Srirama, and Buyya (2015) envisioned a mobile cloud environment that comprises multiple cloud resources, such as remote public clouds, cloudlet, and mobile ad-hoc cloud, to provide adaptive and context-aware mobile cloud services.
Some of the recent research has utilized nearby smart mobile devices to form a mobile cloud that allows avoiding a connection to remote cloud (and public cloud) while upholding the main benefits of computational offloading (Al Noor et al., 2014Al Noor, Hasan, & Haque, 2014; Fernando, Loke, & Rahayu, 2011; Li, Sun, & Wang, 2014; Penner, Johnson, Slyke, Guirguis, & Gu, 2014).
Huerta-Canepa and Lee (2010) proposed a framework in which multiple mobile devices situated nearby could form a cloud and cooperatively execute the workload. Fernando et al. (2011) investigated the viability of a mobile cloud framework to utilize the resources of local devices to address the resource-sparseness problem. Transient clouds, a collaborative computing platform proposed by Penner et al. (2014), enable nearby smart mobile devices to form an ad-hoc network and to provide resources as a service. Li et al. (2014) proposed resource-discovery schemes in proximity and allocated tasks to discovered resources periodically.
2.2. Incentive mechanism
Although the MCC frameworks cited are promising, the deficiency of proper incentive mechanisms will fail to motivate users to share their resources in an ad-hoc mobile cloud environment (Tang, He, & Li, 2016). Limited research has been commenced to address the problem of designing an incentive mechanism for mobile cloud (Al Noor et al., 2014). Compared with the traditional public CSP, the billing/incentive mechanism for a mobile device in a mobile ad-hoc cloud is more difficult because of the decentralized nature of administration and working. Considerable works on the incentive mechanism for mobile ad-hoc networks, such as Crowcroft, Gibbens, Kelly, and Ostring (2004), Gobel and Krzesinski (2008), Li and Shen (2012) and Lu, Lin, Zhu, Shen, and Preiss (2010), have been conducted. However, a subtle difference exists between a mobile ad-hoc cloud and a mobile ad-hoc network, i.e., an ad-hoc network normally shares network resources to relay network traffic in relevant situations, whereas a mobile ad-hoc cloud shares computational resources to save energy and, in some cases, to improve response time. Consequently, the incentives schemes (Crowcroft et al., 2004; Gobel & Krzesinski, 2008; Li & Shen, 2012; Lu et al., 2010) for ad-hoc networks are unsuitable for ad-hoc clouds. Miluzzo, Cáceres, and Chen (2012) analyzed possible incentive mechanisms in which mobile devices were connected in a master⿿slave fashion in a proximate ad-hoc mobile cloud environment. Al Noor et al. (2014) proposed CellCloud and developed a reputation-based incentive model based on economic theory to compensate mobile device users for the provisioning of their resources to other devices. Tang et al. (2016) proposed and analyzed a double-sided bidding mechanism and considered the competition on resource demanding and supplying sides in the mobile cloud.
However, the existing works on incentive management in a mobile cloud environment do not focus on the mobility and movement of devices after successful/unsuccessful offloading transactions. Another problem with the existing incentive approaches in the mobile cloud is the difficulty in billing mobile devices. The difficulty is due to the constraint and nature of the ad-hoc mobile cloud, such as changing connections, carriers, and devices.

]]></section>
    
    <section name="Problem description;Proposed framework" category="results"><![CDATA[
3. Problem description
In this section, we introduce a system model for a proximate mobile cloud environment. We consider a set of collocated mobile device users, and some of them have a computationally intensive task to be completed to save their battery consumption. A wireless access base station exists, through which the mobile device users are connected with one another or the devices are connected with one another using peer-to-peer Bluetooth connections. Similar to many previous studies in MCC (Barbarossa, Sardellitti, & Di Lorenzo, 2013; Wen, Zhang, & Luo, 2012) and mobile networking (Wu, Tseng, Lin, & Sheu, 2002; Wu, Chou, & Kung, 2005), we consider a quasi-static scenario to enable a tractable analysis and to obtain useful insights. In the scenario, the set of mobile device users N remains unchanged during a computation offloading transaction, but it may change across different transactions. This scenario is presented in Fig. 2.
Fig. 2
Download high-res image (395KB)Download full-size image
Fig. 2. Abstraction of reward/retribution in case a device moves from one location to another.
From Fig. 2, we consider mobile device M that aims to offload some of its tasks to nearby available mobile device(s). In this regard, mobile device M starts negotiating with other device(s). Device D is assumed to confirm to execute some tasks of device M. By agreement, device D utilizes its computational and energy resources to execute the tasks offloaded by device M. Device M then moves from its current location to another location. In this scenario, two problems arise, namely, (i) how device D will acquire benefit/reward for sharing its computational resources and for its energy depletion caused by the execution for other devices, and (ii) how device M will pay the retribution in the form of computational resources, energy, or monetary bills. The case of monetary bills is out of the question and is not within the scope of this study because providing monetary billing procedures for such self-organizing systems is difficult. However, the reward and retribution of mobile devices can be solved by involving a centralized entity that keeps track of the debts and credits of the energy valuations spent for other and saved by executing on other devices. Through this method, a device can keep its balance level and use and provide services according to the valuations it has on the central directory.
4. Proposed framework
In a static environment where mobile devices do not move, reward and retribution can be performed efficiently using a barter form of agreement for cooperating with one another to maximize the net utility. However, while the devices move with one another, they cannot form a barter agreement. To solve this issue, we design a conceptual framework based on an agent-oriented methodology. A bird's-eye view of the framework is presented in Fig. 3. The proposed framework introduces the concept of a third-party transitive barter system in which a device generates compensation from other devices. We assume that the network traffic from the mobile devices to the directory is free of monetary cost. Proper security and trust mechanisms are needed to facilitate the adoption of this framework. We consider that the devices are trusted devices in which any third-party computation is executed within well-defined and secure environments (Cox & Chen, 2007; Miluzzo et al., 2012). Any device-to-device and device-to-directory interactions should be regulated by off-the-shelf authentication and authorization techniques (Chang, Ramachandran, Yao, Kuo, & Li, 2016).
Fig. 3
Download high-res image (296KB)Download full-size image
Fig. 3. Bird's-eye view of proposed framework.
A device that aims to take advantage of the framework will be registered on the directory. A newly registered device obtains a premium capital of served energy. The initial energy capital is given, so that the newly registered devices can actually start working in the framework lifecycle. In the next subsection, we present some details on the structure and locality of the directory used for record keeping of the energy valuations of the devices in question.

4.1. Global and local directories
A global directory will be available through the Internet to all computing devices that are registered with the directory, and the content of this directory will be updated by the member mobile devices at specific intervals. Thus, the latest information is available for every device registered in the directory. The global directory database contains a table with fields [udid, current_location, energy_served, current_willingness, specs, current_battery, current_no_of_user].
The description of each of these fields is as follows:
1.
udid: unique device ID.
2.
current_location: current location in terms of latitude and longitude or any other localization primitive of a mobile device that will be used as a key to form a local proximate cloud environment and an offloading device list.
3.
energy_served: the energy a device consumes while serving and performing computation for other devices; every time a device consumes E energy units for other devices, the field is incremented with E energy units. If a device utilized some E energy units of other device, this field will be decremented by E energy units. Once a new device is registered, a premium capital is added to this field, such that the device can utilize other devices.
4.
current_willingness: this Boolean field represents whether a device at current time is willing to entertain other nearby devices by executing some of their tasks.
5.
specs: the specifications (MIPS, memory, storage, and OS version) of a mobile device.
6.
current_battery: the current battery level of a device.
7.
current_number_of_user: indicates how many users a device is currently serving.

A local directory cache can be installed at each cellular provider infrastructure to improve the response time for directory lookup.

4.2. Components needed by framework on mobile devices
A mobile device can be either in a role of offloading service consumer or provider. Besides the role of the mobile device, all the components/agents presented in Fig. 4 should be available on the mobile device registered with the directory. As stated, the framework is based on an agent-oriented methodology. Agents work atomically and interact with one another to improve the total welfare of every mobile device. How different agents in and across different mobile devices interact with one another in an offloading transaction is also presented in Fig. 4. In this figure, the arrows are labeled with the number and description of the step involved in an offloading transaction between two devices.
Fig. 4
Download high-res image (294KB)Download full-size image
Fig. 4. Interaction of agents in the framework.
4.3. Task migration agent
When an application aims to migrate/offload some of its executing tasks to other nearby devices, the task migration agent signals the ⿿client agent⿿ to discover nearby mobile devices. The task migration agent is implemented as an add-on to the application runtime environment in Android. Whenever a method call is encountered with offload-able annotations, the task migration agent starts its actions for offloading the execution of the annotated method to a nearby device. To initiate the offloading process, the task migration agent checks whether an established connection with any service-providing agent exists. If no such connection exists, the task migration agent sends a discovery signal to the client agent and waits for a response from the client agent. The response signal from the client agent contains the connection information of the offloading service provider device. Using the established connection, the task migration agent sends the task and its associated data (if any) to the service-providing device for remote execution and waits for its response. If the task can be divided into subtasks, parallel processing can also be performed.

4.4. Client agent
The client agent is an application that will be deployed on all mobile devices, which are a part of the proximate mobile cloud environment and will execute in background mode. The agent is also responsible for communicating with the directory and negotiating with possible service-providing and service-consuming nearby devices. The agent periodically and asynchronously updates the directory with the parameters stored in the directory. The parameters to be gathered are the current location (latitude and longitude), CPU and memory utilizations, battery status, bandwidth, and service parameters, i.e., service consumption and providing time and energy. Besides the communication with the directory, the functionality of the client agent varies depending on the role of the mobile device. This functionality is explained in the following subsection.

4.5. Functionality of client agent on offloading service-consuming device
Upon receiving a discover request from the task migration agent, the client agent sends a discovery query to the directory. The directory responds to this signal by sending a list of available nearby devices based on the device current location. The device information sent by the directory contains knowledge about the device specification, current battery level, and any other related information. Such information from devices will be used to select the best device to start negotiating with. The decision of the best can be simply done using any decision formulation (Karthik, 2010).
4.6. Functionality of client agent on offloading service-providing device
On the service-providing device, the client agent is responsible for negotiating with the consuming device and can reject the proposal of the consuming device based on the perception available in the directory. The perception (how much energy the requesting device has served for other devices) is necessary for the reward and retribution of mobile devices for providing and consuming computational services to and from other devices. In an emergency situation, the perception is not considered and the proposal is accepted immediately.

4.7. Service provider agent
Service provider agent, once initiated, becomes the end-point where the offloaded method execution occurs. After the service method execution is completed, the client agent of both devices updates the directory about the service time and energy valuations. The service time and energy consumption are updated, so that the valuation can be incremented or decremented from the device record to perform the reward and retribution.

]]></section>
    
    <section name="Discussion" category="discussion"><![CDATA[
5. Discussion
To verify the effectiveness and feasibility of the proposed framework, we construct the simulation environment in such a way that after every successful offloading transaction, one or both of the devices move/disconnect from each other and appear in another cluster/ad-hoc mobile network setting. In the experiment, we conduct consecutive offloading transactions to show the variation in the energy valuation at the directory for each device. The initial capital of energy_served to all devices at the start of the experiment is given as 1000000. This value is based on the setting we used and from the value of fitness function of the decision formulation.
After each offloading transaction, each device updates the results at the central directory for their retribution and reward energy valuations. At this point, the devices can provide the directory with false information to increase their valuations. However, the directory should crosscheck such valuations by matching the data provided by both devices. After one successful offloading transaction, the updated results of the retribution and reward subtracted and added from the initial capital for both devices involved are presented in Fig. 5. In this figure, device 1 is the device that offloads its task, and device 2 is the device to which the task from device 1 is offloaded. According to the result presented in Fig. 5, the initial capital for both devices is the same. However, after the offloading transaction and applying the retribution and reward mechanism, the capital values change for both devices.
Fig. 5
Download high-res image (327KB)Download full-size image
Fig. 5. Change in capital value after one successful offloading transaction.
On the other hand, if device 1 does not serve the requests of other devices and is only rational toward saving its energy, then after some successful offloading transactions, the device energy capital at the directory becomes zero or less than zero, which results in no cooperation from other devices. This phenomenon is presented in Fig. 6, i.e., the energy valuation at the directory for device 1 at the start of every offloading transaction. From the start of the ninth transaction, the valuation is already in negative. Thus, other devices may reject its offloading request based on its rational behavior.
Fig. 6
Download high-res image (188KB)Download full-size image
Fig. 6. Changes in energy valuation after completion of each offloading transaction at directory for device 1 while only using other devices and not providing services to others.
However, if the device is also serving other devices along with using them, then the balance is maintained. This phenomenon is presented in Fig. 7. Even after 20 transactions, the valuation is not zero. From this behavior, we infer that the framework may help increase the motivation of mobile devices to form an ad-hoc mobile cloud.
Fig. 7
Download high-res image (233KB)Download full-size image
Fig. 7. Changes in energy valuation after completion of each offloading transaction at directory for device 1 while using and providing services to other devices.
6. Applications and business prospects
]]><h target="4" match="part">The proposed framework can open another venue of income for mobile network operators (MNOs) by provisioning directory services through a subscription-based mechanism bounded by a time frame.</h><![CDATA[ MNOs can further federate the directories with one another so that true ubiquitous ad-hoc mobile cloud formation and incentive service can be envisioned. Another deployment strategy from business perspectives is for edge network operators that can utilize it according to their business policy.

]]><h target="3" match="part">The framework can also increase the accessibility of mobile services and increase the revenue of mobile service providers by reducing the cost of computation on the server side through opportunistic local offloading aided by the directory services. The framework can also be utilized by federated cloud infrastructures based on the energy valuation and third-party settlement concept presented with this framework.</h><![CDATA[Implementation and tailoring of the framework is expected to reduce the number of monetary transactions and their management among cloud providers.

Many other applications and business opportunities revolving around the concept of the proposed framework can be utilized. Another example is in analytics and data science (Hashem et al., 2016; Larson & Chang, 2016) based on mobile crowd sensing, in which the directory services can be improved by crediting the energy valuation in the directory for an individual device. Big-data applications (Newman, Chang, Walters, & Wills, 2016; Yaqoob et al., 2016) can employ a tailored version of the proposed agent-oriented framework following the rules and incentive unit of the environment.

]]></section>
    
    <section name="Conclusion and future research directions" category="conclusion"><![CDATA[
7. Conclusion and future research directions
In this paper, we present a framework to improve the motivation of mobile devices in forming a mobile ad-hoc cloud. The framework utilizes the principle of retribution and reward for services based on third-party settlements. The experimental results show that mobile device users may be motivated to become part of the ad-hoc formation by maintaining a balance between service consumption and provision.

However, one of the obvious drawbacks of the proposed framework is that when the device energy valuation at the directory is zero, the device cannot consume service from other devices. Another possible direction of investigation is the effect of the mobile application provided through the communication of agents with one another and the directory on the quality of service/quality of experience. The amount of energy consumed by the agents themselves should also be determined. Furthermore, the proposed ad-hoc mobile cloud formation architecture must be adopted in systematic ways, such as that presented by Chang (2015) to widen their acceptability.
]]></section>
</publication>